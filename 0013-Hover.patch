From 62fb6ca1a89445a4ddcec37a610d0a6f4723d31a Mon Sep 17 00:00:00 2001
From: Anupam Srivastava <ansrivastava@corp.ebay.com>
Date: Sat, 2 May 2015 14:42:43 +0530
Subject: [PATCH 13/15] Hover

---
 fvwm/borders.c    | 39 ++++++++++++++++++++++++++++++++-------
 fvwm/builtins.c   |  7 +++++++
 fvwm/events.c     | 22 ++++++++++++++++++++++
 fvwm/events.c.rej | 11 +++++++++++
 fvwm/fvwm.h       |  1 +
 fvwm/screen.h     |  8 ++++++++
 6 files changed, 81 insertions(+), 7 deletions(-)
 create mode 100644 fvwm/events.c.rej

diff --git a/fvwm/borders.c b/fvwm/borders.c
index cd86ffe..35a147c 100644
--- a/fvwm/borders.c
+++ b/fvwm/borders.c
@@ -67,6 +67,7 @@
 /* ---------------------------- imports ------------------------------------ */
 
 extern Window PressedW;
+extern Window HoverW;
 
 /* ---------------------------- included code files ------------------------ */
 
@@ -244,6 +245,7 @@ typedef struct
 	unsigned clear_bmask : NUMBER_OF_TITLE_BUTTONS;
 	unsigned draw_bmask : NUMBER_OF_TITLE_BUTTONS;
 	unsigned max_bmask : NUMBER_OF_TITLE_BUTTONS;
+	unsigned hover_bmask : NUMBER_OF_TITLE_BUTTONS;
 	ButtonState bstate[NUMBER_OF_TITLE_BUTTONS];
 	unsigned is_title_pressed : 1;
 	unsigned is_title_lit : 1;
@@ -349,8 +351,12 @@ static Bool is_button_toggled(
 
 /* rules to get button state */
 static ButtonState border_flags_to_button_state(
-	int is_pressed, int is_lit, int is_toggled)
+	int is_pressed, int is_lit, int is_toggled, int is_hover)
 {
+	if (is_lit && is_hover && Scr.gs.use_hover_buttons)
+	{
+		return BS_ActiveHover;
+	}
 	if (!is_lit && Scr.gs.use_inactive_buttons)
 	{
 		if (is_pressed && Scr.gs.use_inactive_down_buttons)
@@ -871,7 +877,7 @@ static window_parts border_get_tb_parts_to_draw(
 	/* check if state changed */
 	old_state = border_flags_to_button_state(
 		(fw->decor_state.parts_inverted & PART_TITLE),
-		(fw->decor_state.parts_lit & PART_TITLE), 0);
+		(fw->decor_state.parts_lit & PART_TITLE), 0, 0);
 	if (old_state != td->tbstate.tstate)
 	{
 		draw_parts |= PART_TITLE;
@@ -895,7 +901,8 @@ static window_parts border_get_tb_parts_to_draw(
 		old_state = border_flags_to_button_state(
 			(fw->decor_state.buttons_inverted & mask),
 			(fw->decor_state.buttons_lit & mask),
-			(fw->decor_state.buttons_toggled & mask));
+			(fw->decor_state.buttons_toggled & mask),
+			(fw->decor_state.buttons_hover & mask));
 		if (old_state != td->tbstate.bstate[i])
 		{
 			draw_parts |= PART_BUTTONS;
@@ -4398,6 +4405,7 @@ static void border_draw_buttons(
 	fw->decor_state.buttons_inverted = td->tbstate.pressed_bmask;
 	fw->decor_state.buttons_lit = td->tbstate.lit_bmask;
 	fw->decor_state.buttons_toggled = td->tbstate.toggled_bmask;
+	fw->decor_state.buttons_hover = td->tbstate.hover_bmask;
 
 	return;
 }
@@ -4666,13 +4674,18 @@ static void border_get_titlebar_descr_state(
 		{
 			tbstate->toggled_bmask |= mask;
 		}
+		if (FW_W_BUTTON(fw, i) == HoverW)
+		{
+			tbstate->hover_bmask |= mask;
+		}
 		tbstate->bstate[i] = border_flags_to_button_state(
 			tbstate->pressed_bmask & mask,
 			tbstate->lit_bmask & mask,
-			tbstate->toggled_bmask & mask);
+			tbstate->toggled_bmask & mask,
+			tbstate->hover_bmask & mask);
 	}
 	tbstate->tstate = border_flags_to_button_state(
-		tbstate->is_title_pressed, tbstate->is_title_lit, 0);
+		tbstate->is_title_pressed, tbstate->is_title_lit, 0, 0);
 }
 
 static window_parts border_get_titlebar_descr(
@@ -4937,6 +4950,7 @@ static void border_draw_titlebar(
 		fw->decor_state.buttons_lit = 0;
 		fw->decor_state.buttons_inverted = 0;
 		fw->decor_state.buttons_toggled = 0;
+		fw->decor_state.buttons_hover = 0;
 		return;
 	}
 	memset(&td, 0, sizeof(td));
@@ -4988,6 +5002,7 @@ static void border_draw_titlebar(
 		fw->decor_state.buttons_toggled =
 			(fw->decor_state.buttons_toggled &
 			 ~td.tbstate.max_bmask) | td.tbstate.toggled_bmask;
+		fw->decor_state.buttons_hover &= td.tbstate.hover_bmask;
 	}
 
 	return;
@@ -5078,11 +5093,12 @@ int border_is_using_border_style(
 	ButtonState bs;
 	int is_pressed;
 	int is_toggled;
+	int is_hover;
 	int i;
 
 	/* title */
 	is_pressed = (FW_W_TITLE(fw) == PressedW);
-	bs = border_flags_to_button_state(is_pressed, has_focus, 0);
+	bs = border_flags_to_button_state(is_pressed, has_focus, 0, 0);
 	if (DFS_USE_BORDER_STYLE(TB_STATE(GetDecor(fw, titlebar))[bs].style))
 	{
 		return 1;
@@ -5095,8 +5111,9 @@ int border_is_using_border_style(
 		}
 		is_pressed = (FW_W_BUTTON(fw, i) == PressedW);
 		is_toggled = (is_button_toggled(fw, i) == True);
+		is_hover = (FW_W_BUTTON(fw, i) == HoverW);
 		bs = border_flags_to_button_state(
-			is_pressed, (has_focus == True), is_toggled);
+			is_pressed, (has_focus == True), is_toggled, is_hover);
 		if (DFS_USE_BORDER_STYLE(
 			    TB_STATE(GetDecor(fw, buttons[i]))[bs].style))
 		{
@@ -5557,6 +5574,7 @@ void CMD_ButtonState(F_CMD_ARGS)
 				DEFAULT_USE_INACTIVE_BUTTONS;
 			Scr.gs.use_inactive_down_buttons =
 				DEFAULT_USE_INACTIVE_DOWN_BUTTONS;
+			Scr.gs.use_hover_buttons = 0;
 			return;
 		}
 		first = False;
@@ -5578,6 +5596,12 @@ void CMD_ButtonState(F_CMD_ARGS)
 				action, &action,
 				DEFAULT_USE_INACTIVE_DOWN_BUTTONS, True);
 		}
+		else if (StrEquals("hover", token))
+		{
+			Scr.gs.use_hover_buttons = ParseToggleArgument(
+				action, &action,
+				0, True);
+		}
 		else
 		{
 			Scr.gs.use_active_down_buttons =
@@ -5586,6 +5610,7 @@ void CMD_ButtonState(F_CMD_ARGS)
 				DEFAULT_USE_INACTIVE_BUTTONS;
 			Scr.gs.use_inactive_down_buttons =
 				DEFAULT_USE_INACTIVE_DOWN_BUTTONS;
+			Scr.gs.use_hover_buttons = 0;
 			fvwm_msg(ERR, "cmd_button_state",
 				 "Unknown button state %s", token);
 			return;
diff --git a/fvwm/builtins.c b/fvwm/builtins.c
index b5fdb4f..fa1bb5a 100644
--- a/fvwm/builtins.c
+++ b/fvwm/builtins.c
@@ -103,12 +103,16 @@ static char *button_states[BS_MaxButtonStateName + 1] =
 {
 	"ActiveUp",
 	"ActiveDown",
+	"ActiveHover",
 	"InactiveUp",
 	"InactiveDown",
+	"InactiveHover",
 	"ToggledActiveUp",
 	"ToggledActiveDown",
+	"ToggledActiveHover",
 	"ToggledInactiveUp",
 	"ToggledInactiveDown",
+	"ToggledInactiveHover",
 	"Active",
 	"Inactive",
 	"ToggledActive",
@@ -119,10 +123,13 @@ static char *button_states[BS_MaxButtonStateName + 1] =
 	"AllInactive",
 	"AllUp",
 	"AllDown",
+	"AllHover",
 	"AllActiveUp",
 	"AllActiveDown",
+	"AllActiveHover",
 	"AllInactiveUp",
 	"AllInactiveDown",
+	"AllInactiveHover",
 	NULL
 };
 
diff --git a/fvwm/events.c b/fvwm/events.c
index 3ea69bb..4e83941 100644
--- a/fvwm/events.c
+++ b/fvwm/events.c
@@ -186,6 +186,7 @@ static event_group_t *base_event_group = NULL;
 
 int last_event_type = 0;
 Window PressedW = None;
+Window HoverW = None;
 
 /* ---------------------------- local functions ---------------------------- */
 
@@ -1842,6 +1843,23 @@ static void __refocus_stolen_focus_win(const evh_args_t *ea)
 	return;
 }
 
+static void redraw_hover(FvwmWindow* fw, Window w)
+{
+	if (fw)
+	{
+		int i;
+		for (i = 0; i < NUMBER_OF_TITLE_BUTTONS; i++)
+		{
+			if (w == FW_W_BUTTON(fw, i))
+			{
+				HoverW = FW_W_BUTTON(fw, i);
+			}
+		}
+		border_redraw_decorations(fw);
+		HoverW = None;
+	}
+}
+
 /* ---------------------------- event handlers ----------------------------- */
 
 void HandleButtonPress(const evh_args_t *ea)
@@ -2053,6 +2071,8 @@ void HandleEnterNotify(const evh_args_t *ea)
 	ewp = &te->xcrossing;
 ENTER_DBG((stderr, "++++++++ en (%d): fw %p w 0x%08x sw 0x%08x mode 0x%x detail 0x%x '%s'\n", ++ecount, fw, (int)ewp->window, (int)ewp->subwindow, ewp->mode, ewp->detail, fw?fw->visible_name:"(none)"));
 
+	redraw_hover(fw, ewp->window);
+
 	if (
 		ewp->window == Scr.Root &&
 		ewp->detail == NotifyInferior && ewp->mode == NotifyNormal)
@@ -2760,6 +2780,8 @@ void HandleLeaveNotify(const evh_args_t *ea)
 
 	DBUG("HandleLeaveNotify", "Routine Entered");
 
+	redraw_hover(fw, te->xcrossing.window);
+
 ENTER_DBG((stderr, "-------- ln (%d): fw %p w 0x%08x sw 0x%08x mode 0x%x detail 0x%x '%s'\n", ++ecount, fw, (int)te->xcrossing.window, (int)te->xcrossing.subwindow, te->xcrossing.mode, te->xcrossing.detail, fw?fw->visible_name:"(none)"));
 	lwp = &te->xcrossing;
 	if (
diff --git a/fvwm/events.c.rej b/fvwm/events.c.rej
new file mode 100644
index 0000000..de50450
--- /dev/null
+++ b/fvwm/events.c.rej
@@ -0,0 +1,11 @@
+--- fvwm/events.c
++++ fvwm/events.c
+@@ -2635,6 +2655,8 @@ void HandleLeaveNotify(const evh_args_t *ea)
+
+	DBUG("HandleLeaveNotify", "Routine Entered");
+
++	redraw_hover(fw, te->xcrossing.window);
++
+ ENTER_DBG((stderr, "-------- ln (%d): fw 0x%08x w 0x%08x sw 0x%08x mode 0x%x detail 0x%x '%s'\n", ++ecount, (int)fw, (int)te->xcrossing.window, (int)te->xcrossing.subwindow, te->xcrossing.mode, te->xcrossing.detail, fw?fw->visible_name:"(none)"));
+	lwp = &te->xcrossing;
+	if (
diff --git a/fvwm/fvwm.h b/fvwm/fvwm.h
index 73a436c..3236df1 100644
--- a/fvwm/fvwm.h
+++ b/fvwm/fvwm.h
@@ -827,6 +827,7 @@ typedef struct FvwmWindow
 		unsigned buttons_lit : NUMBER_OF_TITLE_BUTTONS;
 		unsigned buttons_inverted : NUMBER_OF_TITLE_BUTTONS;
 		unsigned buttons_toggled : NUMBER_OF_TITLE_BUTTONS;
+		unsigned buttons_hover : NUMBER_OF_TITLE_BUTTONS;
 		unsigned parts_drawn : 12;
 		unsigned parts_lit : 12;
 		unsigned parts_inverted : 12;
diff --git a/fvwm/screen.h b/fvwm/screen.h
index e309268..5d66944 100644
--- a/fvwm/screen.h
+++ b/fvwm/screen.h
@@ -202,12 +202,16 @@ typedef enum
 	BS_All = -1,
 	BS_ActiveUp,
 	BS_ActiveDown,
+	BS_ActiveHover,
 	BS_InactiveUp,
 	BS_InactiveDown,
+	BS_InactiveHover,
 	BS_ToggledActiveUp,
 	BS_ToggledActiveDown,
+	BS_ToggledActiveHover,
 	BS_ToggledInactiveUp,
 	BS_ToggledInactiveDown,
+	BS_ToggledInactiveHover,
 	BS_MaxButtonState,
 	BS_MaxButtonStateMask = BS_MaxButtonState - 1,
 	BS_Active,
@@ -220,10 +224,13 @@ typedef enum
 	BS_AllInactive,
 	BS_AllUp,
 	BS_AllDown,
+	BS_AllHover,
 	BS_AllActiveUp,
 	BS_AllActiveDown,
+	BS_AllActiveHover,
 	BS_AllInactiveUp,
 	BS_AllInactiveDown,
+	BS_AllInactiveHover,
 	BS_MaxButtonStateName
 } ButtonState;
 
@@ -515,6 +522,7 @@ typedef struct ScreenInfo
 		unsigned use_active_down_buttons : 1;
 		unsigned use_inactive_buttons : 1;
 		unsigned use_inactive_down_buttons : 1;
+		unsigned use_hover_buttons : 1;
 	} gs; /* global style structure */
 	struct
 	{
-- 
2.0.5

