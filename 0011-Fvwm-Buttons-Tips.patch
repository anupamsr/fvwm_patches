From 12dd57f3c98207d2d675e5637444b1e66f49b864 Mon Sep 17 00:00:00 2001
From: Anupam Srivastava <ansrivastava@corp.ebay.com>
Date: Sat, 2 May 2015 14:41:23 +0530
Subject: [PATCH 11/15] Fvwm Buttons Tips

---
 modules/FvwmButtons/FvwmButtons.c |  40 ++++++++++++-
 modules/FvwmButtons/FvwmButtons.h |   7 +++
 modules/FvwmButtons/parse.c       | 121 ++++++++++++++++++++++++++++++++++++++
 3 files changed, 166 insertions(+), 2 deletions(-)

diff --git a/modules/FvwmButtons/FvwmButtons.c b/modules/FvwmButtons/FvwmButtons.c
index af62349..dcc3c2f 100644
--- a/modules/FvwmButtons/FvwmButtons.c
+++ b/modules/FvwmButtons/FvwmButtons.c
@@ -62,6 +62,7 @@
 #include "libs/Colorset.h"
 #include "libs/vpacket.h"
 #include "libs/FRender.h"
+#include "libs/FTips.h"
 #include "libs/fsm.h"
 #include "libs/ColorUtils.h"
 #include "libs/Graphics.h"
@@ -1047,6 +1048,9 @@ void Loop(void)
 
 	tmp.name = NULL;
 	tmp.name_list = NULL;
+
+	FTipsInit(Dpy);
+
 	while ( !isTerminated )
 	{
 		if (My_FNextEvent(Dpy, &Event))
@@ -1173,6 +1177,10 @@ void Loop(void)
 	  if (!event.xconfigure.send_event &&
 	      Event.xconfigure.window != MyWindow)
 	    continue;
+
+	  if(FTipsHandleEvents(Dpy, &event))
+		  continue;
+
 	  fev_sanitise_configure_notify(&event.xconfigure);
 	  Event.xconfigure.x = event.xconfigure.x;
 	  Event.xconfigure.y = event.xconfigure.y;
@@ -1216,10 +1224,33 @@ void Loop(void)
 	case EnterNotify:
 		b = handle_new_position(
 			b, Event.xcrossing.x, Event.xcrossing.y);
+
+		if(Event.xcrossing.mode == NotifyNormal)
+		{
+			b = handle_new_position(
+			b, Event.xcrossing.x, Event.xcrossing.y);
+			FTipsOn(Dpy,MyWindow,UberButton->c->tips_config,
+			    (void *)UberButton, b->tipslabel,
+			    b->x, b->y, Width,Height);
+			FTipsUpdateLabel(Dpy, b->tipslabel);
+		}
 		break;
 
 	case MotionNotify:
+
 		b = handle_new_position(b, Event.xmotion.x, Event.xmotion.y);
+
+		x = Event.xbutton.x;
+		y = Event.xbutton.y;
+
+		if(b->tipslabel != NULL)
+		{
+			FTipsOn(Dpy,MyWindow,UberButton->c->tips_config, (void *)UberButton, b->tipslabel, x, y, w, h);
+			FTipsUpdateLabel(Dpy, b->tipslabel);
+		} else {
+			 FTipsCancel(Dpy);
+		}
+
 		break;
 
 	case LeaveNotify:
@@ -1242,11 +1273,13 @@ void Loop(void)
 				b = ActiveButton;
 				ActiveButton = NULL;
 				RedrawButton(b, DRAW_FORCE, NULL);
+
 			}
 			if (CurrentButton)
 			{
 				RedrawButton(b, DRAW_FORCE, NULL);
 			}
+			FTipsCancel(Dpy);
 		}
 		break;
 
@@ -1268,8 +1301,8 @@ void Loop(void)
 	  Window dummy;
 
 	  XTranslateCoordinates(
-	    Dpy, Event.xbutton.window, MyWindow, Event.xbutton.x,
-	    Event.xbutton.y, &x, &y, &dummy);
+			  Dpy, Event.xbutton.window, MyWindow, Event.xbutton.x,
+			  Event.xbutton.y, &x, &y, &dummy);
 	}
 	if (CurrentButton)
 	{
@@ -1311,7 +1344,10 @@ void Loop(void)
 	  RedrawButton(tmp, DRAW_FORCE, NULL);
 	}
 	else
+	{
 	  RedrawButton(b, DRAW_FORCE, NULL);
+	}
+
 	if (!act)
 	{
 	  break;
diff --git a/modules/FvwmButtons/FvwmButtons.h b/modules/FvwmButtons/FvwmButtons.h
index 7ae6308..18cdd7e 100644
--- a/modules/FvwmButtons/FvwmButtons.h
+++ b/modules/FvwmButtons/FvwmButtons.h
@@ -38,6 +38,8 @@
 #include "libs/fvwmlib.h"
 #include "libs/Picture.h"
 #include "libs/Flocale.h"
+#include "libs/FTips.h"
+#define FONT_STRING "-*-fixed-medium-r-normal--13-*"
 
 /* ------------------------------- structs --------------------------------- */
 
@@ -82,6 +84,7 @@ typedef struct
 	unsigned b_PressIcon      : 1; /* Use alternate Icon on press */
 	unsigned b_PressColorset  : 1; /* Use alternate Colorset on press */
 	unsigned b_PressTitle     : 1; /* Use alternate Title text on press */
+	unsigned b_UseTips	  : 1; /* Whether to use tips or not. */
 } flags_type;
 
 /* Flags for b->swallow */
@@ -131,6 +134,9 @@ struct container_info_struct
 	int colorset;              /* b_Colorset */
 	int activeColorset;        /* b_ActiveColorset */
 	int pressColorset;         /* b_PressColorset */
+	char *tipsfont;		   /* b_TipsFont*/
+	ftips_config *tips_config; /* Struct that holds tips info.*/
+
 	Pixel fc;                  /* b_Fore */
 	Pixel bc, hc, sc;          /* b_Back && !b_IconBack */
 	FvwmPicture *backicon;     /* b_Back && b_IconBack */
@@ -187,6 +193,7 @@ struct button_info_struct
 	FvwmPicture *pressicon;  /* b_PressIcon */
 	int activeColorset;      /* b_ActiveColorset */
 	int pressColorset;       /* b_PressColorset */
+	char *tipslabel;	 /* b_TipsLabel */
 	Window IconWin;          /* b_Swallow */
 	Window PanelWin;         /* b_Panel */
 	Window BackIconWin;      /* b_Back && b_IconBack */
diff --git a/modules/FvwmButtons/parse.c b/modules/FvwmButtons/parse.c
index ddeedb1..b522d4c 100644
--- a/modules/FvwmButtons/parse.c
+++ b/modules/FvwmButtons/parse.c
@@ -889,6 +889,7 @@ static void ParseButton(button_info **uberb, char *s)
 			"presstitle",
 			"activecolorset",
 			"presscolorset",
+			"tipslabel",
 			"top",
 			NULL
 		};
@@ -1612,7 +1613,30 @@ static void ParseButton(button_info **uberb, char *s)
 					b->flags.b_ActiveColorset = 0;
 				}
 				break;
+			/* --------- TipsLabel ---------*/
+			case 28:
+				s = trimleft(s);
+				t = seekright(&s);
+				if(ub->c->flags.b_UseTips)
+				{
+					if (*s == '(')
+					{
+						fprintf(stderr,
+						"%s: justification not allowed "
+						"for TipsLabel.\n", MyName);
+					}
+					if (t && *t && (t[0] != '-' || t[1] != 0))
+					{
+						if (b->tipslabel != NULL)
+						{
+							free(b->tipslabel);
+						} else {
+							b->tipslabel = t;
+						}
+					}
+				}
 
+				break;
 			/* --------------- --------------- */
 			case 26: /* PressColorset */
 				i = strtol(s, &t, 10);
@@ -1784,6 +1808,14 @@ static void ParseConfigLine(button_info **ubb, char *s)
 		"colorset",
 		"activecolorset",
 		"presscolorset",
+		"usetips",
+		"tipsfont",
+		"tipsdelay",
+		"tipscolorset",
+		"tipsborderwidth",
+		"tipsplacement",
+		"tipsjustification",
+		"tipsoffset",
 		NULL
 	};
 	int i, j, k;
@@ -1931,7 +1963,96 @@ static void ParseConfigLine(button_info **ubb, char *s)
 			ub->c->flags.b_PressColorset = 0;
 		}
 		break;
+	case 15: /* UseTips */
+		/* We're using tips.*/
+		ub->c->flags.b_UseTips = 1;
+
+		/* Set the defaults up. */
+		ub->c->tips_config = FTipsNewConfig();
+
+		/* Include fonts. */
+		CopyStringWithQuotes(&ub->c->tipsfont,FONT_STRING);
+		ub->c->tips_config->Ffont = FlocaleLoadFont(Dpy,
+				ub->c->tipsfont, MyName);
+		break;
+	case 16: /* TipsFont */
+		if(ub->c->flags.b_UseTips)
+		{
+			CopyStringWithQuotes(&ub->c->tipsfont,s);
+
+		ub->c->tips_config->Ffont = FlocaleLoadFont(Dpy, ub->c->tipsfont,
+				MyName);
+		}
+		break;
+	case 17: /*TipsDelay */
+		if(ub->c->flags.b_UseTips)
+		{
+			i = sscanf(s, "%d %d", &j, &k);
+			if( i > 0)
+			{
+				/* Then only one value was given.  Set the
+				 * mapped_delay option to this given value
+				 * also since it's optional.
+				 */
+				ub->c->tips_config->delay = ub->c->tips_config->mapped_delay = j;
+			}
+			if( i > 1)
+			{
+				/* Two values passed in.  We only need to
+				 * change the value for mapped_delay here.
+				 */
+
+				ub->c->tips_config->mapped_delay = k;
+
+			}
+		}
+			break;
+	case 18: /* TipsColorset */
+		if (ub->c->flags.b_UseTips)
+		{
+			i = sscanf(s, "%d", &j);
+			if (i > 0)
+			{
+				ub->c->tips_config->colorset = j;
+				AllocColorset(j);
+			}
+		}
+		break;
+	case 19: /* TipsBorderWidth */
+		if (ub->c->flags.b_UseTips)
+		{
+			i = sscanf(s, "%d", &j);
 
+			if(i > 0)
+			{
+				ub->c->tips_config->border_width = j;
+			}
+		}
+		break;
+	case 20: /* TipsPlacement */
+		if(ub->c->flags.b_UseTips)
+		{
+			s = trimleft(s);
+
+			/* Options ... */
+			if(!strcasecmp(s, "up"))
+			{
+				i = FTIPS_PLACEMENT_UP;
+			} else if(!strcasecmp(s, "down")) {
+				i = FTIPS_PLACEMENT_DOWN;
+			} else if(!strcasecmp(s, "left")) {
+				i = FTIPS_PLACEMENT_LEFT;
+			} else if(!strcasecmp(s, "right")) {
+				i = FTIPS_PLACEMENT_RIGHT;
+			} else if(!strcasecmp(s, "updown")) {
+				i = FTIPS_PLACEMENT_AUTO_UPDOWN;
+			} else if(!strcasecmp(s, "leftright")) {
+				i = FTIPS_PLACEMENT_AUTO_LEFTRIGHT;
+			}
+
+			ub->c->tips_config->placement = i;
+		}
+			break;
 	default:
 		s = trimleft(s);
 		ParseButton(ubb, s);
-- 
2.0.5

